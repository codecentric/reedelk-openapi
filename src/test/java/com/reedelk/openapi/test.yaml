openapi: 3.0.0
info:
  title: Swagger Petstore
  description: 'This is a sample server Petstore server.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For
    this sample, you can use the api key `special-key` to test the authorization filters.'
  termsOfService: http://swagger.io/terms/
  contact: {email: apiteam@swagger.io}
  license: {name: Apache 2.0, url: 'http://www.apache.org/licenses/LICENSE-2.0.html'}
  version: 1.0.2
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs: {description: Find out more, url: 'http://swagger.io'}
  - {name: store, description: Access to Petstore orders}
  - name: user
    description: Operations about user
    externalDocs: {description: Find out more about our store, url: 'http://swagger.io'}
servers:
  - {url: 'https://petstore.swagger.io/v2'}
paths:
  /store/inventory:
    get:
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                additionalProperties: {format: int32, type: integer}
                type: object
      tags: [store]
  /user/login:
    get:
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema: {type: string}
            application/json:
              schema: {type: string}
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema: {format: int32, type: integer}
            X-Expires-After:
              description: date in UTC when token expires
              schema: {format: date-time, type: string}
        '400': {description: Invalid username/password supplied}
      parameters:
        - name: username
          description: The user name for login
          in: query
          example: null
          schema: {type: string}
          required: true
        - name: password
          description: The password for login in clear text
          in: query
          example: null
          schema: {type: string}
          required: true
      tags: [user]
  /pet:
    put:
      summary: Update an existing pet
      description: ''
      operationId: updatePet
      requestBody: {$ref: '#/components/requestBodies/Pet'}
      responses:
        '400': {description: Invalid ID supplied}
        '404': {description: Pet not found}
        '405': {description: Validation exception}
      tags: [pet]
    post:
      summary: Add a new pet to the store
      description: ''
      operationId: addPet
      requestBody: {$ref: '#/components/requestBodies/Pet'}
      responses:
        '405': {description: Invalid input}
      tags: [pet]
  /pet/{petId}:
    post:
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name: {description: Updated name of the pet, type: string}
                status: {description: Updated status of the pet, type: string}
      responses:
        '405': {description: Invalid input}
      parameters:
        - name: petId
          description: ID of pet that needs to be updated
          in: path
          example: null
          schema: {format: int64, type: integer}
          required: true
      tags: [pet]
    get:
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema: {$ref: '#/components/schemas/Pet'}
              example: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Pet>\n\t<id>1230</id>\n\
                \t<Category>\n\t\t<id>0</id>\n\t\t<name>string</name>\n\t</Category>\n\
                \t<name>doggie</name>\n\t<photoUrl>\n\t\t<photoUrl>string</photoUrl>\n\
                \t</photoUrl>\n\t<tag>\n\t\t<Tag>\n\t\t\t<id>0</id>\n\t\t\t<name>string</name>\n\
                \t\t</Tag>\n\t</tag>\n\t<status>available</status>\n</Pet>"
            application/json:
              schema: {$ref: '#/components/schemas/Pet'}
        '400': {description: Invalid ID supplied}
        '404': {description: Pet not found}
      parameters:
        - name: petId
          description: ID of pet to return
          in: path
          example: null
          schema: {format: int64, type: integer}
          required: true
      tags: [pet]
components:
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/xml:
          schema: {$ref: '#/components/schemas/Pet'}
        application/json:
          schema: {$ref: '#/components/schemas/Pet'}
      required: true
  schemas:
    Category:
      xml: {name: Category}
      type: object
      properties:
        name: {type: string}
        id: {format: int64, type: integer}
    Tag:
      xml: {name: Tag}
      type: object
      properties:
        name: {type: string}
        id: {format: int64, type: integer}
    Pet:
      xml: {name: Pet}
      type: object
      required: [name, photoUrls]
      properties:
        photoUrls:
          xml: {name: photoUrl, wrapped: true}
          type: array
          items: {type: string}
        name: {type: string, example: doggie}
        id: {format: int64, type: integer}
        category: {$ref: '#/components/schemas/Category'}
        tags:
          xml: {name: tag, wrapped: true}
          type: array
          items: {$ref: '#/components/schemas/Tag'}
        status:
          description: pet status in the store
          type: string
          enum: [available, pending, sold]
