{
  "openapi": "3.0.0",
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.0.2",
    "contact": {
      "email": "apiteam@swagger.io"
    }
  },
  "servers": [
    {
      "url": "https://petstore.swagger.io/v2"
    }
  ],
  "paths": {
    "/store/inventory": {
      "get": {
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "store"
        ]
      }
    },
    "/user/login": {
      "get": {
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "responses": {
          "400": {
            "description": "Invalid username/password supplied"
          },
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "schema": {
                  "format": "date-time",
                  "type": "string"
                },
                "description": "date in UTC when token expires",
                "style": "simple"
              },
              "X-Rate-Limit": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                },
                "description": "calls per hour allowed by the user",
                "style": "simple"
              }
            },
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "schema": {
              "type": "string"
            },
            "description": "The user name for login",
            "style": "form",
            "in": "query",
            "required": true
          },
          {
            "name": "password",
            "schema": {
              "type": "string"
            },
            "description": "The password for login in clear text",
            "style": "form",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "user"
        ]
      }
    },
    "/pet/{petId}": {
      "post": {
        "summary": "Updates a pet in the store with form data",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated name of the pet"
                  },
                  "status": {
                    "type": "string",
                    "description": "Updated status of the pet"
                  }
                }
              }
            }
          }
        },
        "description": "",
        "operationId": "updatePetWithForm",
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "parameters": [
          {
            "name": "petId",
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "description": "ID of pet that needs to be updated",
            "style": "form",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "pet"
        ]
      },
      "get": {
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "petId",
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "description": "ID of pet to return",
            "style": "form",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "pet"
        ]
      }
    },
    "/pet": {
      "post": {
        "summary": "Add a new pet to the store",
        "description": "",
        "operationId": "addPet",
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet"
        },
        "tags": [
          "pet"
        ]
      },
      "put": {
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet"
        },
        "tags": [
          "pet"
        ]
      }
    }
  },
  "components": {
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        },
        "required": true
      }
    },
    "schemas": {
      "Pet": {
        "type": "object",
        "xml": {
          "name": "Pet"
        },
        "required": [
          "name",
          "photoUrls"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "photoUrls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "xml": {
              "name": "photoUrl",
              "wrapped": true
            }
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "xml": {
              "name": "tag",
              "wrapped": true
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        }
      },
      "Category": {
        "type": "object",
        "xml": {
          "name": "Category"
        },
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Tag": {
        "type": "object",
        "xml": {
          "name": "Tag"
        },
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          }
        }
      }
    }
  }
}
